name: Infrastructure CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'infrastructure/**'

env:
  AWS_REGION: us-west-2
  TF_VERSION: 1.6.0

jobs:
  terraform-validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: |
        cd infrastructure/terraform
        terraform fmt -check -recursive

    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd infrastructure/terraform
        terraform validate

    - name: Run tflint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: latest
    
    - name: Lint Terraform files
      run: |
        cd infrastructure/terraform
        tflint --init
        tflint

  terraform-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infrastructure/terraform
        framework: terraform
        output_format: sarif
        output_file_path: checkov.sarif

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov.sarif

    - name: Run tfsec
      uses: aquasecurity/tfsec-sarif-action@v0.1.4
      with:
        sarif_file: tfsec.sarif

    - name: Upload tfsec results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: tfsec.sarif

  terraform-plan-dev:
    needs: [terraform-validate, terraform-security]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=dev/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Plan
      id: plan
      run: |
        cd infrastructure/terraform
        terraform plan -var-file="environments/dev.tfvars" -out=tfplan
        terraform show -no-color tfplan > plan.txt

    - name: Comment PR with plan
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('infrastructure/terraform/plan.txt', 'utf8');
          const output = `#### Terraform Plan 
          
          <details><summary>Show Plan</summary>
          
          \`\`\`
          ${plan}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  terraform-apply-dev:
    needs: [terraform-validate, terraform-security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=dev/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Apply
      run: |
        cd infrastructure/terraform
        terraform apply -var-file="environments/dev.tfvars" -auto-approve

    - name: Output infrastructure info
      run: |
        cd infrastructure/terraform
        terraform output -json > outputs.json

    - name: Upload outputs
      uses: actions/upload-artifact@v3
      with:
        name: terraform-outputs-dev
        path: infrastructure/terraform/outputs.json

  terraform-apply-prod:
    needs: [terraform-validate, terraform-security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=prod/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Plan
      run: |
        cd infrastructure/terraform
        terraform plan -var-file="environments/prod.tfvars" -out=tfplan

    - name: Manual approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ secrets.PRODUCTION_APPROVERS }}
        minimum-approvals: 2
        issue-title: "Production Infrastructure Deployment Approval"
        issue-body: |
          Please review the Terraform plan and approve this production deployment.
          
          **Branch:** ${{ github.ref }}
          **Commit:** ${{ github.sha }}
          **Actor:** ${{ github.actor }}

    - name: Terraform Apply
      run: |
        cd infrastructure/terraform
        terraform apply tfplan

    - name: Output infrastructure info
      run: |
        cd infrastructure/terraform
        terraform output -json > outputs.json

    - name: Upload outputs
      uses: actions/upload-artifact@v3
      with:
        name: terraform-outputs-prod
        path: infrastructure/terraform/outputs.json

  cost-estimation:
    needs: terraform-validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Install Infracost
      run: |
        curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh

    - name: Configure Infracost
      run: |
        infracost auth login --api-key ${{ secrets.INFRACOST_API_KEY }}

    - name: Generate cost estimate
      run: |
        cd infrastructure/terraform
        infracost breakdown --path . --format json --out-file infracost.json

    - name: Post cost estimate to PR
      run: |
        cd infrastructure/terraform
        infracost comment github --path infracost.json \
          --repo ${{ github.repository }} \
          --github-token ${{ secrets.GITHUB_TOKEN }} \
          --pull-request ${{ github.event.pull_request.number }}

  drift-detection:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        environment: [dev, prod]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=${{ matrix.environment }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Plan (Drift Detection)
      id: drift
      run: |
        cd infrastructure/terraform
        terraform plan -var-file="environments/${{ matrix.environment }}.tfvars" -detailed-exitcode
      continue-on-error: true

    - name: Notify on drift
      if: steps.drift.outputs.exitcode == 2
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: " Infrastructure drift detected in ${{ matrix.environment }} environment!",
            attachments: [{
              color: "danger",
              fields: [{
                title: "Environment",
                value: "${{ matrix.environment }}",
                short: true
              }, {
                title: "Repository",
                value: "${{ github.repository }}",
                short: true
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup-resources:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: cleanup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Manual confirmation
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ secrets.INFRASTRUCTURE_ADMINS }}
        minimum-approvals: 1
        issue-title: "Infrastructure Cleanup Confirmation"
        issue-body: |
           **WARNING: This will destroy infrastructure resources!**
          
          Please confirm that you want to proceed with resource cleanup.

    - name: Terraform Destroy
      run: |
        cd infrastructure/terraform
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=cleanup/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"
        terraform destroy -var-file="environments/cleanup.tfvars" -auto-approve
