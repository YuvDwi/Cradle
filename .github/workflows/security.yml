name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM

jobs:
  secret-scanning:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  dependency-scanning:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [backend, mobile]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js (for mobile)
      if: matrix.component == 'mobile'
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Python (for backend)
      if: matrix.component == 'backend'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies (mobile)
      if: matrix.component == 'mobile'
      run: |
        cd mobile
        npm ci

    - name: Install dependencies (backend)
      if: matrix.component == 'backend'
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Run npm audit (mobile)
      if: matrix.component == 'mobile'
      run: |
        cd mobile
        npm audit --audit-level=high --json > npm-audit.json || true

    - name: Run safety check (backend)
      if: matrix.component == 'backend'
      run: |
        cd backend
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Run Snyk (mobile)
      if: matrix.component == 'mobile'
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json-file-output=snyk-mobile.json
        json: true

    - name: Run Snyk (backend)
      if: matrix.component == 'backend'
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json-file-output=snyk-backend.json
        json: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ matrix.component }}
        path: |
          ${{ matrix.component }}/*audit*.json
          ${{ matrix.component }}/*safety*.json
          ${{ matrix.component }}/snyk*.json

  container-scanning:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        cd backend
        docker build -t baby-monitor-api:scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'baby-monitor-api:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: 'baby-monitor-api:scan'
        fail-build: false
        severity-cutoff: high
        output-format: sarif
        output-file: grype-results.sarif

    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'grype-results.sarif'

  code-scanning:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        language: [python, javascript]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Setup Python (for Python analysis)
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      if: matrix.language == 'python'
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Setup Node.js (for JavaScript analysis)
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Node.js dependencies
      if: matrix.language == 'javascript'
      run: |
        cd mobile
        npm ci

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{ matrix.language }}"

  sast-scanning:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/docker
          p/kubernetes
        generateSarif: "1"

    - name: Upload Semgrep results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  license-scanning:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd mobile && npm ci
        cd ../backend && pip install -r requirements.txt

    - name: Run FOSSA scan
      uses: fossas/fossa-action@main
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}
        project: baby-monitor

    - name: Check license compliance
      run: |
        cd mobile
        npx license-checker --excludePrivatePackages --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' || true

  infrastructure-scanning:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform,docker,github_actions
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

    - name: Run Kics
      uses: checkmarx/kics-github-action@v1.7.0
      with:
        path: '.'
        output_formats: 'sarif'
        output_path: kics-results.sarif
        fail_on: high

    - name: Upload Kics results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: kics-results.sarif

  security-scorecard:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
    
    steps:
    - name: Run OSSF Scorecard
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: scorecard-results.sarif
        results_format: sarif
        publish_results: true

    - name: Upload OSSF Scorecard results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: scorecard-results.sarif

  security-report:
    needs: [secret-scanning, dependency-scanning, container-scanning, code-scanning, sast-scanning, license-scanning, infrastructure-scanning, security-scorecard]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scan Results" >> security-summary.md
        echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> security-summary.md
        echo "- Dependency Scanning: ${{ needs.dependency-scanning.result }}" >> security-summary.md
        echo "- Container Scanning: ${{ needs.container-scanning.result }}" >> security-summary.md
        echo "- Code Scanning: ${{ needs.code-scanning.result }}" >> security-summary.md
        echo "- SAST Scanning: ${{ needs.sast-scanning.result }}" >> security-summary.md
        echo "- License Scanning: ${{ needs.license-scanning.result }}" >> security-summary.md
        echo "- Infrastructure Scanning: ${{ needs.infrastructure-scanning.result }}" >> security-summary.md
        echo "- Security Scorecard: ${{ needs.security-scorecard.result }}" >> security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md

    - name: Notify security team
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        text: ' Security scan failed! Please review the results.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
